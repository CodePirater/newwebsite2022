---
title: "Test Analysis Walkthrough"
author: "Joshua De La Torre"
format:
  html:
    self-contained: true
    code-fold: true
    code-tools: true
---

First we'll load our libraries

```{r}
library(tidyverse)
library(lubridate)
library(DT)
```

```{r}
# run this line below load the data for this assignment
impeach <- read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vRh8d5JaDqBtByzNw2JZF3idaACobDhhk-p7chJoktA0HawELHFOvjQOqCpzGA4MGONvPlR7GASqW-K/pub?gid=1765341510&single=true&output=csv")

# it will load a dataframe called "impeach," containing U.S. House Democrats
# and whether they supported impeachment along with when they announced such support

view(impeach)
DT::datatable(impeach, 
              rownames = FALSE, 
              filter = "top"# <--- NEW STUFF HERE
              )
```

```{r}
#This creates an interactive version of the impeach data table using the DT package.
#The code below adds the buttons and other interactive elements as well as telling the system which column to highlight.
#Adding in the filter also lets the system know that you want to be able to sort the table.
#creating the TestAnalysisTable allows us to export the a web page version of the table

impeach <- impeach %>% 
  mutate(
    for_impeachment = as_factor(for_impeachment),
    p16winningparty = as.factor(p16winningparty)
  )

TestAnalysisTable <- DT::datatable(impeach, 
              rownames = FALSE, 
              filter = "top", 
              extensions = 'Buttons', 
              options = list(   # <--- NEW STUFF STARTS HERE
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', "excel")
              )) %>%
  DT::formatStyle('for_impeachment',  color = 'red', fontWeight = 'bold')


# ... then just run this simple bit of code to export to html
DT::saveWidget(TestAnalysisTable, "TestAnalysisTable.html")

```


```{r}
# 1) The column "for_impeachment" indicates whether the member has publicly called for
# an impeachment inquiry. Filter to return only the ones where the answer is NO.    

impeach %>% 
  filter(for_impeachment == "NO") %>%
  summarise(for_impeachment)

#filtered impeach by using the filter function to display only "NO" results from the  for_impeachment column.
#Used summarise to only display the for_impeachment column and hide the other columns
```


```{r}
# 2) Filter to return only results where a member is both against impeachment, and comes from a 
# district that President Trump won in 2016 (which is noted in the "p16winningparty" column)

impeach %>% 
  filter(for_impeachment == "YES",
         p16winningparty == "R") %>%
  summarise(for_impeachment, p16winningparty)

#filtered for_impeachment column to show only "YES" entries and the p16winningparty to show only "R".
#used summarise to show only the relevant columns
```


```{r}
# 3) Filter for only results where a member is against impeachment, comes from a 
# district that President Trump won in 2016 (which is noted in the "p16winningparty" column),
# and also comes from a district that Mitt Romney won in 2012 ("p12winningparty").

impeach %>% 
  filter(for_impeachment == "YES",
         p16winningparty == "R",
         p12winningparty == "R")%>%
  summarise(for_impeachment, p16winningparty, p12winningparty)

#Used similar steps from previous question, but added additional filter for p12winningparty to tell the system to also sort for "R" results from that column
#filtered impeach by those who said no to impeaching trump and states who voted trump in 2016 and Romney in 2012
#used summarise to show only the relevant columns
```


```{r}
# 4) Filter for only results from September 2019 where a member is a YES for impeachment. 

impeach %>% 
  filter(for_impeachment == "YES",
         year(date_exact) == 2019,
         month(date_approx_month) == 9)
#filtered impeach dataset so that for_impeachment only displays "YES" results from September 2019.
#filtered date exact so that the only "YES" results that are displayed are those that match the numeric 2019 and numeric 9 in the date_exact and date_approx_month columns respectively.
```


```{r}
# 5) Filter for only results where a member is a YES for impeachment and is from a district
# where Clinton won more than 70 percent of the vote in 2016 (found in column "clinton_percent")

impeach %>% 
  filter(for_impeachment == "YES",
         p16winningparty == "D",
         clinton_percent > 70 )%>%
  summarise(for_impeachment, p16winningparty, clinton_percent)
#similar steps as previous chunks. removed date exact and date approx and now filtering impeach for "yes" results in for_impeachment and "D" in p16winningwarty. Added a filter using > for an additional filter to only show "YES" and "D" results that also have clinton winning more than 70% of the vote.
#added summarise to clean up the table and only display the relevant columns
```


```{r}
# 6) Sort the entire dataframe based on the percentage of a district that has a 
# bachelor's degree or higher ("pct_bachelors"), from lowest to highest

impeach %>% 
  arrange(pct_bachelors) %>%
  summarise(pct_bachelors)

#used arrange() on the pct_bachelors column inside the impeach dataset
#arrange () reorders the column from the lowest numeric value to the highest
#added summarise to only display pct_bachelors

```


```{r}
# 7) Sort the just those who are NO on impeachment based on the percentage of a district that has a 
# bachelor's degree or higher ("pct_bachelors"), from lowest to highest

impeach %>% 
  filter(for_impeachment == "NO") %>% 
  arrange(pct_bachelors) %>%
  summarise(for_impeachment, pct_bachelors)

#filtered impeach to sort by "NO" on for impeachment column and to arrange those results based on their corresponding percentage with a bachelor's degree
```


```{r}
# 8) Sort the just those who are NO on impeachment based on the percentage of a district that has a 
# bachelor's degree or higher ("pct_bachelors"), from lowest to highest.
# Then filter those records by only those whose bachelor's percentage is below the national average (found
# in the "pct_bachelors_compared_to_national" column).

impeach %>% 
  filter(for_impeachment == "NO") %>% 
  arrange(pct_bachelors) %>% 
  filter(pct_bachelors_compared_to_national == "BELOW")%>%
  summarise(for_impeachment, pct_bachelors_compared_to_national, pct_bachelors)

#filtered by no vote on impeach and arranged pct_bachelors by lowest to highest
#added additional filter for "BELOW" results under pct_bachelors_compared_to_national
#added summarise to display relevant columsn
```


```{r}
# 9) Filter for only members from New Jersey who are NO on impeachment

impeach %>% 
  filter(for_impeachment == "NO") %>% 
  filter(state == "NJ")
#filtered for members of congress from New Jersey who voted no to impeachment by limiting for_impeachment to "NO" results and created another filter for the state column to include only NJ results
```


```{r}
# 10) Filter for those who were YES on impeachment, with a declared date prior to 2019. So only
# those with dates before 2019.  Then sort those so that the highest Clinton vote percentages are 
# at the top.   
impeach %>% 
  filter(for_impeachment == "YES",
         year(date_exact) == 2017,
         ) %>%
  arrange(clinton_percent>trump_percent)
#filtered for_impeachment for "YES" results corresponding with numeric value 2017 in the date_exact column arranged in order of high Clinton percentage vote agaisnt Trump.
```


```{r}
# 11) Answer this question with a single numeric answer, and show the R code you
# used to reach that answer: How many members in the dataset who are holdouts on impeachment
# come from districts with a GDP below the national figure?
# Hint: there's a function called nrow() that tells you how many rows are in a dataframe

impeach %>% 
  filter(gdp_above_national == "BELOW",
         for_impeachment == "NO") %>% 
  nrow()
#I got 19 by filtering gdp_above_national column to only "BELOW" and sorting for "no" to impeaching trump in for_impeachment column.
#used nrow() to calculate number of columns in the matrix

```
